summarize(Mean.Proj = mean(veridicality_num), CILow = ci.low(veridicality_num), CIHigh = ci.high(veridicality_num)) %>%
mutate(YMin.Proj = Mean.Proj - CILow, YMax.Proj = Mean.Proj + CIHigh, predicateType = fct_reorder(as.factor(predicateType),Mean.Proj))
nrow(mean.proj) #10
levels(mean.proj$predicateType)
ggplot(mean.proj, aes(x=predicateType, y=Mean.Proj, color = voice)) +
geom_point() +
geom_errorbar(aes(ymin=YMin.Proj,ymax=YMax.Proj),width=0) +
geom_hline(yintercept=0) +
theme(axis.ticks.x=element_blank(),legend.position="top") +
theme(axis.text.x = element_text(size=10,angle = 75, hjust = 1)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Predicate")
ggplot(mean.proj, aes(x=predicateType, y=Mean.Proj, color = voice)) +
geom_point() +
geom_errorbar(aes(ymin=YMin.Proj,ymax=YMax.Proj),width=0) +
geom_hline(yintercept=0) +
theme(legend.position="top",
axis.ticks.x=element_blank(),
axis.text.x = element_text(size=10,angle = 75, hjust = 1)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Predicate")
# calculate by-predicate means
mean.proj = d.proj %>%
group_by(verb_renamed) %>%
summarize(Mean.Proj = mean(veridicality_num), CILow = ci.low(veridicality_num), CIHigh = ci.high(veridicality_num)) %>%
mutate(YMin.Proj = Mean.Proj - CILow, YMax.Proj = Mean.Proj + CIHigh, verb_renamed = fct_reorder(as.factor(verb_renamed),Mean.Proj))
nrow(mean.proj) #544
levels(mean.proj$verb_renamed)
# add predicateType to the means
tmp = d.proj %>%
#filter(voice == "active") %>%
select(c(verb,verb_renamed,voice,predicateType)) %>%
distinct(verb,verb_renamed,voice,predicateType)
nrow(tmp) #544
mean.proj = left_join(mean.proj, tmp, by = c("verb_renamed")) %>%
distinct() %>%
mutate(verb_renamed = fct_reorder(as.factor(verb_renamed),Mean.Proj))
nrow(mean.proj) #544
cols$verb_renamed = factor(cols$verb_renamed, levels = mean.proj$verb_renamed[order(mean.proj$Mean.Proj)], ordered = TRUE)
# remove "other" and "comPriv" predicates
mean.proj = mean.proj %>%
filter(predicateType != "other" & predicateType != "comPriv")
nrow(mean.proj) #525
ggplot(mean.proj, aes(x=verb_renamed, y=Mean.Proj, fill = predicateType, color = predicateType)) +
geom_point() +
#geom_errorbar(aes(ymin=YMin.Proj,ymax=YMax.Proj),width=0) +
geom_hline(yintercept=0) +
theme(axis.ticks.x=element_blank(),legend.position="top") +
#theme(axis.text.x = element_text(color=cols$Colors,size=10,angle = 75, hjust = 1)) +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Predicate")
ggplot(mean.proj, aes(x=verb_renamed, y=Mean.Proj, fill = predicateType, color = predicateType)) +
geom_point() +
#geom_errorbar(aes(ymin=YMin.Proj,ymax=YMax.Proj),width=0) +
geom_hline(yintercept=0) +
theme(legend.position="top",
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank()) +
#theme(axis.text.x = element_text(color=cols$Colors,size=10,angle = 75, hjust = 1)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Predicate")
ggplot(mean.proj, aes(x=verb_renamed, y=Mean.Proj, fill = predicateType, color = predicateType)) +
geom_point() +
#geom_errorbar(aes(ymin=YMin.Proj,ymax=YMax.Proj),width=0) +
geom_hline(yintercept=0) +
theme(legend.position="top",
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank()) +
#theme(axis.text.x = element_text(color=cols$Colors,size=10,angle = 75, hjust = 1)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
facet_grid(. ~ predicateType) +
ylab("Mean projection rating") +
xlab("Predicate")
ggplot(mean.proj, aes(x=verb_renamed, y=Mean.Proj, color = voice)) +
geom_point() +
geom_hline(yintercept=0) +
scale_color_discrete(name=element_blank(), labels=c("verbal", "adjectival")) +
theme(legend.position="top",
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x=verb_renamed, y=Mean.Proj, color = voice)) +
geom_point() +
geom_hline(yintercept=0) +
scale_color_discrete(name=element_blank(), labels=c("verbal predicate", "adjectival predicate")) +
theme(legend.position="top",
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
# only "emotive" predicates
mean.proj = mean.proj %>%
filter(predicateType == "emotive")
nrow(mean.proj) #150
ggplot(mean.proj, aes(x=verb_renamed, y=Mean.Proj, color = voice)) +
geom_point() +
geom_hline(yintercept=0) +
scale_color_discrete(name=element_blank(), labels=c("verbal predicate", "adjectival predicate")) +
theme(legend.position="top",
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggsave("../graphs/projection-emotive-predicates.pdf",height=4,width=8)
# only emotives which occur in both "active" and "passive" sentence frames
mean.proj = mean.proj %>%
group_by(verb) %>%
filter(n()>1) %>%
ungroup()
nrow(mean.proj) #12
ggplot(mean.proj, aes(x=verb_renamed, y=Mean.Proj, color = voice)) +
geom_point() +
geom_hline(yintercept=0) +
scale_color_discrete(name=element_blank(), labels=c("verbal predicate", "adjectival predicate")) +
theme(legend.position="top",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggsave("../graphs/projection-emotives-both-verb-and-adjective.pdf",height=4,width=8)
ggplot(mean.proj, aes(x=verb, y=Mean.Proj, color = voice)) +
geom_point() +
geom_errorbar(aes(ymin=YMin.Proj,ymax=YMax.Proj),width=0) +
geom_hline(yintercept=0) +
theme(legend.position="top",
axis.text.x = element_text(vjust = 1, hjust = 0.5),
panel.grid.major.x = element_blank()) +
scale_color_discrete(name="Type of predicate", labels=c("verbal", "adjectival")) +
scale_x_discrete(labels=function(x) sub("_", " ", x)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x = verb, y = Mean.Proj, color = voice)) +
geom_point() +
geom_errorbar(aes(ymin = YMin.Proj,ymax = YMax.Proj),width = 0) +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_text(vjust = 1, hjust = 0.5),
panel.grid.major.x = element_blank()) +
scale_color_discrete(name = element_blank(), labels = c("verbal", "adjectival")) +
scale_x_discrete(labels = function(x) sub("_", " ", x)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x = verb, y = Mean.Proj, color = voice)) +
geom_point() +
geom_errorbar(aes(ymin = YMin.Proj,ymax = YMax.Proj),width = 0) +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_text(vjust = 1, hjust = 0.5),
panel.grid.major.x = element_blank()) +
scale_color_discrete(name = element_blank(), labels = c("verbal predicate", "adjectival predicate")) +
scale_x_discrete(labels = function(x) sub("_", " ", x)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggsave("../graphs/projection-emotives-verb-adjective-comparison.pdf",height = 4,width = 8)
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, color = voice)) +
geom_point() +
geom_hline(yintercept = 0) +
scale_color_discrete(name=element_blank(), labels = c("verbal predicate", "adjectival predicate")) +
theme(legend.position="top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, colour = voice)) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name=element_blank(), labels = c("verbal predicate", "adjectival predicate")) +
theme(legend.position="top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, colour = voice)) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = element_blank(), labels = c("verbal predicate", "adjectival predicate")) +
theme(legend.position="top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, colour = voice)) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = element_blank(),
labels = c("verbal predicate", "adjectival predicate")) +
theme(legend.position = "top",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, colour = voice)) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = element_blank(),
labels = c("verbal predicate", "adjectival predicate")) +
theme(legend.position="top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, colour = voice)) +
geom_point() +
geom_hline(yintercept = 0) +
scale_colour_discrete(name = element_blank(),
labels = c("verbal predicate", "adjectival predicate")) +
theme(legend.position = "top",
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
ggplot(mean.proj, aes(x = verb, y = Mean.Proj, colour = voice)) +
geom_point() +
geom_errorbar(aes(ymin = YMin.Proj,ymax = YMax.Proj), width = 0) +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_text(vjust = 1, hjust = 0.5),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = element_blank(),
labels = c("verbal predicate", "adjectival predicate")) +
scale_x_discrete(labels = function(x) sub("_", " ", x)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Emotive predicate")
view(d.proj)
view(mean.proj)
# calculate by-predicate means
mean.proj = d.proj %>%
group_by(verb_renamed) %>%
summarize(Mean.Proj = mean(veridicality_num), CILow = ci.low(veridicality_num), CIHigh = ci.high(veridicality_num)) %>%
mutate(YMin.Proj = Mean.Proj - CILow, YMax.Proj = Mean.Proj + CIHigh, verb_renamed = fct_reorder(as.factor(verb_renamed),Mean.Proj))
view(mean.proj)
nrow(mean.proj) #544
levels(mean.proj$verb_renamed)
# add predicateType to the means
tmp = d.proj %>%
#filter(voice == "active") %>%
select(c(verb,verb_renamed,voice,predicateType)) %>%
distinct(verb,verb_renamed,voice,predicateType)
nrow(tmp) #544
view(mean.proj)
mean.proj = left_join(mean.proj, tmp, by = c("verb_renamed")) %>%
distinct() %>%
mutate(verb_renamed = fct_reorder(as.factor(verb_renamed),Mean.Proj))
view(mean.proj)
cols$verb_renamed = factor(cols$verb_renamed, levels = mean.proj$verb_renamed[order(mean.proj$Mean.Proj)], ordered = TRUE)
# remove "other" and "comPriv" predicates
mean.proj = mean.proj %>%
filter(predicateType != "other" & predicateType != "comPriv")
nrow(mean.proj) #525
mean.proj[((mean.proj$predicateType != "emotive") & (mean.proj$voice != "passive")), 0]
mean.proj[mean.proj$predicateType != "emotive" & mean.proj$voice != "passive", 0]
view(mean.proj)
mean.proj[((mean.proj$predicateType == "emotive") & (mean.proj$voice == "passive")), 0]
# how many predicates in which type and which voice?
d.proj %>%
select(predicateType, verb,voice) %>%
unique() %>%
group_by(predicateType,voice) %>%
summarize(count=n())
mean.proj[((mean.proj$predicateType != "emotive") & (mean.proj$voice != "passive")), 0]
mean.proj[((mean.proj$predicateType != "emotive") & (mean.proj$voice != "passive")), 0]
mean.proj[(mean.proj$predicateType != "emotive" & mean.proj$voice != "passive"), 0]
mean.proj[!mean.proj$predicateType == "emotive" & mean.proj$voice == "passive", 0]
mean.proj[mean.proj$predicateType == "emotive" & mean.proj$voice == "passive", 0]
mean.proj[!(mean.proj$predicateType == "emotive" & mean.proj$voice == "passive"), 0]
mean.proj[!(mean.proj$predicateType == "emotive" & mean.proj$voice == "passive"), 0]
mean.proj = mean.proj %>%
filter(mean.proj[!(mean.proj$predicateType == "emotive" & mean.proj$voice == "passive"), 0])
mean.proj = mean.proj %>%
filter(!(mean.proj$predicateType == "emotive" & mean.proj$voice == "passive"))
nrow(mean.proj) #150
view(mean.proj)
ggplot(mean.proj, aes(x=verb_renamed, y=Mean.Proj, fill = predicateType, color = predicateType)) +
geom_point() +
#geom_errorbar(aes(ymin=YMin.Proj,ymax=YMax.Proj),width=0) +
geom_hline(yintercept=0) +
theme(legend.position="top",
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
panel.grid.major.x = element_blank()) +
#theme(axis.text.x = element_text(color=cols$Colors,size=10,angle = 75, hjust = 1)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Predicate")
nrow(mean.proj) #150
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, fill = predicateType, color = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, fill = predicateType, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = "Predicate type") +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, fill = predicateType, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
# scale_colour_discrete(name = "Predicate type") +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, fill = predicateType, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = "Predicate type") +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, fill = predicateType, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
legend.title = "Predicate type",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, fill = predicateType, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
legend.title = element_text("Predicate type"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, fill = predicateType, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, fill = predicateType, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_fill_discrete(name = element_blank()) +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_fill_discrete(name = element_blank()) +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = element_blank()) +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggplot(mean.proj, aes(x = verb_renamed, y = Mean.Proj, colour = predicateType)) +
geom_point() +
geom_hline(yintercept = 0) +
theme(legend.position = "top",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank()) +
scale_colour_discrete(name = "Predicate type") +
scale_y_continuous(limits = c(-1,1), breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Verbal predicate")
ggsave("../graphs/projection-by-verbal-predicate.pdf", height = 4, width = 13)
# Testing hypotheses based on
# White & Rawlins' MegaVeridicality I dataset
# analysis.R
# set working directory to directory of script
this.dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this.dir)
source('../../helpers.R')
# load required packages
library(tidyverse)
library(dichromat)
library(ggrepel)
theme_set(theme_bw())
# load data
d = read.csv("../data/d.csv")
nrow(d) #21692
names(d)
# load predicate coding
y = read.csv("../data/predicate-coding.csv")
nrow(y) #544
names(y)
d = left_join(d,y,by=c("verb","voice"))
nrow(d) #21692
# create datasets for projection and veridicality inferences
d.proj = droplevels(subset(d,d$polarity == "negative" | d$conditional2 == "conditional"))
nrow(d.proj) #16291
d.verid = droplevels(subset(d,d$polarity != "negative" & d$conditional2 != "conditional"))
nrow(d.verid) #5401
# H1: communicative / emotive / cognitive / evidential ----
view(d.proj)
# create predicateType column
d.proj = d.proj %>%
mutate(predicateType = case_when(communicative == "yes" & private == "yes" ~ "comPriv",
communicative == "yes" ~ "communicative",
emotive == "yes" ~ "emotive",
cognitive == "yes" ~ "cognitive",
evidential == "yes" ~ "evidential",
TRUE ~ "other"))
table(d.proj$predicateType)
# how many predicates in which type and which voice?
d.proj %>%
select(predicateType, verb,voice) %>%
unique() %>%
group_by(predicateType,voice) %>%
summarize(count=n())
# color code the predicates
cols = d.proj %>%
select(c(verb_renamed,predicateType)) %>%
distinct(verb_renamed,predicateType)
cols
nrow(cols) #544
# color-code the predicates
cols$Colors =  ifelse(cols$predicateType == "comPriv", "pink",
ifelse(cols$predicateType == "emotive", "#D55E00",
ifelse(cols$predicateType == "cognitive", "#5b43c4",
ifelse(cols$predicateType == "communicative", "gray",
ifelse(cols$predicateType == "inferential", "green", "black")))))
cols
# calculate by-predicateType means
mean.proj = d.proj %>%
#filter(voice == "active") %>%
group_by(predicateType,voice) %>%
summarize(Mean.Proj = mean(veridicality_num), CILow = ci.low(veridicality_num), CIHigh = ci.high(veridicality_num)) %>%
mutate(YMin.Proj = Mean.Proj - CILow, YMax.Proj = Mean.Proj + CIHigh, predicateType = fct_reorder(as.factor(predicateType),Mean.Proj))
nrow(mean.proj) #10
levels(mean.proj$predicateType)
ggplot(mean.proj, aes(x=predicateType, y=Mean.Proj, color = voice)) +
geom_point() +
geom_errorbar(aes(ymin=YMin.Proj,ymax=YMax.Proj),width=0) +
geom_hline(yintercept=0) +
theme(legend.position="top",
axis.ticks.x=element_blank(),
axis.text.x = element_text(size=10,angle = 75, hjust = 1)) +
scale_y_continuous(limits = c(-1,1),breaks = c(-1,0,1)) +
ylab("Mean projection rating") +
xlab("Predicate")
view(mean.proj)
